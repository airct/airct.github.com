<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://airct.github.com/atom.xml" rel="self"/>
  <link href="http://airct.github.com/"/>
  <updated>2012-10-07T22:18:44+08:00</updated>
  <id>http://airct.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://airct.github.com/blog/2012/10/07/hello/"/>
    <updated>2012-10-07T22:06:00+08:00</updated>
    <id>http://airct.github.com/blog/2012/10/07/hello</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcache 安裝紀錄 deamon]]></title>
    <link href="http://airct.github.com/blog/2012/09/24/memcache-install-guide2/"/>
    <updated>2012-09-24T02:57:00+08:00</updated>
    <id>http://airct.github.com/blog/2012/09/24/memcache-install-guide2</id>
    <content type="html"><![CDATA[<p>memcache vs memcached</p>

<p>memcache memcached 都有 deamon 和 PHP Extension</p>

<p>memcached 比較新，功能多</p>

<p>Memcached Server install guide</p>

<pre><code>$ yum install libevent              
</code></pre>

<ul>
<li>會出錯 <a href="http://www.wangshun.org/?p=416">http://www.wangshun.org/?p=416</a> 所以不行!! 需要全部手動安裝 *</li>
</ul>


<p>確認一下安裝環境，相關參考官方網站<a href="http://memcached.org/">http://memcached.org/</a></p>

<pre><code>$ uname -a                          
Linux localhost.localdomain 2.6.18-128.el5 #1 SMP Wed Jan 21 10:44:23 EST 2009 i686 i686 i386 GNU/Linux

$ wget http://memcached.googlecode.com/files/memcached-1.4.10.tar.gz    
$ tar zxvf memcached-1.4.10.tar.gz 
$ cd memcached-1.4.10
$ ./configure
# checking build system type... i686-pc-linux-gnu
# checking host system type... i686-pc-linux-gnu
# checking target system type... i686-pc-linux-gnu
# checking for a BSD-compatible install... /usr/bin/install -c
# checking whether build environment is sane... yes
# checking for a thread-safe mkdir -p... /bin/mkdir -p
# checking for gawk... gawk
# checking whether make sets $(MAKE)... yes
# checking for gcc... gcc
# checking whether the C compiler works... yes
# checking for C compiler default output file name... a.out
# checking for suffix of executables... 
# checking whether we are cross compiling... no
# checking for suffix of object files... o
# checking whether we are using the GNU C compiler... yes
# checking whether gcc accepts -g... yes
# checking for gcc option to accept ISO C89... none needed
# checking for style of include used by make... GNU
# checking dependency style of gcc... gcc3
# checking how to run the C preprocessor... gcc -E
# checking for grep that handles long lines and -e... /bin/grep
# checking for egrep... /bin/grep -E
# checking for icc in use... no
# checking for ANSI C header files... yes
# checking for sys/types.h... yes
# checking for sys/stat.h... yes
# checking for stdlib.h... yes
# checking for string.h... yes
# checking for memory.h... yes
# checking for strings.h... yes
# checking for inttypes.h... yes
# checking for stdint.h... yes
# checking for unistd.h... yes
# checking whether __SUNPRO_C is declared... no
# checking for gcc option to accept ISO C99... -std=gnu99
# checking whether gcc -std=gnu99 and cc understand -c and -o together... yes
# checking sasl/sasl.h usability... no
# checking sasl/sasl.h presence... no
# checking for sasl/sasl.h... no
# checking for gcov... /usr/bin/gcov
# checking for main in -lgcov... yes
# checking for library containing clock_gettime... -lrt
# checking for library containing socket... none required
# checking for library containing gethostbyname... none required
# checking for libevent directory... configure: error: libevent is required.  You can get it from http://www.monkey.org/~provos/libevent/

# If it's already installed, specify its path using --with-libevent=/dir/
</code></pre>

<p>上面叭啦叭啦一堆，跟你說 libevent 沒有! 硍! yum install libevent 沒屁用!
直接從訊息說的網址抓 <a href="http://www.monkey.org/~provos/libevent/">http://www.monkey.org/~provos/libevent/</a></p>

<p>相關參考 官網 : <a href="http://www.monkey.org/~provos/libevent/">http://www.monkey.org/~provos/libevent/</a></p>

<pre><code>$ cd ..
$ wget https://github.com/downloads/libevent/libevent/libevent-2.0.16-stable.tar.gz
$ ./configure --prefix=/usr
$ make
$ make install
</code></pre>

<p>然後出現下面的安裝完畢說明</p>

<pre><code>Libraries have been installed in:
   /usr/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
</code></pre>

<p>最後當然要檢查一下裝到了沒</p>

<pre><code>$ ls -al /usr/lib | grep libevent

    # lrwxrwxrwx   1 root root       21 Nov 26 00:38 libevent-2.0.so.5 -&gt; libevent-2.0.so.5.1.4
    # -rwxr-xr-x   1 root root   762242 Nov 26 00:38 libevent-2.0.so.5.1.4
    # -rw-r--r--   1 root root   990968 Nov 26 00:38 libevent.a
    # lrwxrwxrwx   1 root root       26 Nov 26 00:38 libevent_core-2.0.so.5 -&gt; libevent_core-2.0.so.5.1.4
    # -rwxr-xr-x   1 root root   453822 Nov 26 00:38 libevent_core-2.0.so.5.1.4
    # -rw-r--r--   1 root root   607858 Nov 26 00:38 libevent_core.a
    # -rwxr-xr-x   1 root root      968 Nov 26 00:38 libevent_core.la
    # lrwxrwxrwx   1 root root       26 Nov 26 00:38 libevent_core.so -&gt; libevent_core-2.0.so.5.1.4
    # lrwxrwxrwx   1 root root       27 Nov 26 00:38 libevent_extra-2.0.so.5 -&gt; libevent_extra-2.0.so.5.1.4
    # -rwxr-xr-x   1 root root   322768 Nov 26 00:38 libevent_extra-2.0.so.5.1.4
    # -rw-r--r--   1 root root   383182 Nov 26 00:38 libevent_extra.a
    # -rwxr-xr-x   1 root root      975 Nov 26 00:38 libevent_extra.la
    # lrwxrwxrwx   1 root root       27 Nov 26 00:38 libevent_extra.so -&gt; libevent_extra-2.0.so.5.1.4
    # -rwxr-xr-x   1 root root      933 Nov 26 00:38 libevent.la
    # lrwxrwxrwx   1 root root       29 Nov 26 00:38 libevent_openssl-2.0.so.5 -&gt; libevent_openssl-2.0.so.5.1.4
    # -rwxr-xr-x   1 root root    70919 Nov 26 00:38 libevent_openssl-2.0.so.5.1.4
    # -rw-r--r--   1 root root    79220 Nov 26 00:38 libevent_openssl.a
    # -rwxr-xr-x   1 root root     1004 Nov 26 00:38 libevent_openssl.la
    # lrwxrwxrwx   1 root root       29 Nov 26 00:38 libevent_openssl.so -&gt; libevent_openssl-2.0.so.5.1.4
    # lrwxrwxrwx   1 root root       30 Nov 26 00:38 libevent_pthreads-2.0.so.5 -&gt; libevent_pthreads-2.0.so.5.1.4
    # -rwxr-xr-x   1 root root    14289 Nov 26 00:38 libevent_pthreads-2.0.so.5.1.4
    # -rw-r--r--   1 root root    11814 Nov 26 00:38 libevent_pthreads.a
    # -rwxr-xr-x   1 root root      996 Nov 26 00:38 libevent_pthreads.la
    # lrwxrwxrwx   1 root root       30 Nov 26 00:38 libevent_pthreads.so -&gt; libevent_pthreads-2.0.so.5.1.4
    # lrwxrwxrwx   1 root root       21 Nov 26 00:38 libevent.so -&gt; libevent-2.0.so.5.1.4
</code></pre>

<p>切換到 memcached 資料夾，繼續之前的步驟</p>

<pre><code>$ cd memcached-1.4.10                   
$ ./configure                           // 一樣一堆checking for XXXX 之後，沒有錯誤啦!!
$ make
$ make install
$ ls -al /usr/local/bin/mem*            // 檢查一下裝到了沒

$ /usr/local/bin/memcached -d -m 10 -u root -l 172.16.1.46 -p 11211         
    -- another way
    -- $ /usr/local/bin/memcached -d -m 10 -u root -l 192.168.0.200 -p 12000 -c 256 -P /tmp/memcached.pid
    -- -d 背景服務
    -- -m 是分配 Memcache 使用的記憶體容量，單位是MB
    -- -u 
    -- -l 是設定 Memcached 監聽的 ip 位置
    -- -p 是設定 Memcached 監聽的 port
    -- -c 是最大同時進行的連接數量，預設是1024
    -- -P 
</code></pre>

<p>另外的安裝方式，超爽的方式，怎麼 CentOS 5.3 沒有
<a href="http://www.webdeveloperjuice.com/2010/01/25/10-baby-steps-to-install-memcached-server-and-access-it-with-php/">http://www.webdeveloperjuice.com/2010/01/25/10-baby-steps-to-install-memcached-server-and-access-it-with-php/</a></p>

<p>Step1: Install libevent ,libmemcached and libmemcached devel (dependency)</p>

<pre><code>$ yum install libevent
$ yum install libmemcached libmemcached-devel
</code></pre>

<p>Step 2: Install Memcached Server</p>

<pre><code>$ yum install memcached
</code></pre>

<p>Step 3: Start Memcached server</p>

<pre><code>$ memcached -d -m 512 -l 127.0.0.1 -p 11211 -u nobody
</code></pre>

<p><em>d = daemon, m = memory(MB), u = user, l = IP to listen to, p = port</em></p>

<p>Step 4: Check your memcached server is running successfully</p>

<pre><code>$ ps -eaf | grep memcached
</code></pre>

<p>Step 5: Connect Memcached server via telnet</p>

<pre><code>$ telnet 127.0.0.1 11211
</code></pre>

<p>Step 6: Check current status of Memcached Server on telnet prompt</p>

<pre><code>$ stats
</code></pre>

<p>Step 7: Exit telnet</p>

<pre><code>$ quit
</code></pre>

<p>Step 8: Install PHP client to access Memcached Server</p>

<pre><code>$ pecl install memcache
</code></pre>

<p>It will make “memcache.so”, you have to just put it on your /etc/php.ini file.</p>

<p>Step 9: Restart your apache server</p>

<pre><code>$ service httpd restart
</code></pre>

<p>最後PHP memcache 程式碼範例</p>

<pre><code>[http://www.php.net/manual/en/memcache.set.php](http://www.php.net/manual/en/memcache.set.php)
</code></pre>

<p>最後相關參考</p>

<p>http://www.webdeveloperjuice.com/2010/01/25/10-baby-steps-to-install-memcached-server-and-access-it-with-php/
http://www.ccvita.com/257.html
http://lwfirst.blogspot.com/2011/02/php-memcache.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcache_install_guide]]></title>
    <link href="http://airct.github.com/blog/2012/09/24/memcache-install-guide/"/>
    <updated>2012-09-24T02:57:00+08:00</updated>
    <id>http://airct.github.com/blog/2012/09/24/memcache-install-guide</id>
    <content type="html"><![CDATA[<p>memcache vs memcached</p>

<p>memcache memcached 都有 deamon 和 PHP Extension</p>

<p>memcached 比較新，功能多</p>

<p>memcache Extension 安裝方式</p>

<pre><code>$ wget http://pecl.php.net/get/memcache-2.2.4.tgz
$ tar -zxvf memcached-2.2.4.tgz
$ cd memcached-2.2.4
$ phpize &amp;&amp; ./configure --enable-memcache &amp;&amp; make
$ cp modules/memcache.so /usr/lib/php/modules/

$ vi /etc/php.ini
</code></pre>

<p>關於 extension 的附近會看到下方的說明，這是新版的 php 已經改成如此 ( linux )</p>

<p><em>Note: packaged extension modules are now loaded via the .ini files</em>
<em>found in the directory /etc/php.d</em></p>

<pre><code>$ touch /etc/php.d/memcache.ini
</code></pre>

<p><em>$ echo &#8216;extension=memcache.so&#8217; > /etc/php.d/memcache.ini 如果不自行編 memcache.ini 的情況下，此行可以忽略</em></p>

<pre><code>$ vi /etc/php.d/memcache.ini
</code></pre>

<p>貼上下方設定，主要是 <em>extension=memcache.so</em> 這行其他都是註解，方便以後修改。</p>

<pre><code>; Enable memcache extension module
extension=memcache.so

; Options for the memcache module

; Whether to transparently failover to other servers on errors
;memcache.allow_failover=1
; Defines how many servers to try when setting and getting data.
;memcache.max_failover_attempts=20
; Data will be transferred in chunks of this size
;memcache.chunk_size=8192
; The default TCP port number to use when connecting to the memcached server
;memcache.default_port=11211
; Hash function {crc32, fnv}
;memcache.hash_function=crc32
; Hash strategy {standard, consistent}
;memcache.hash_strategy=standard

; Options to use the memcache session handler

; Use memcache as a session handler
;session.save_handler=memcache
; Defines a comma separated of server urls to use for session storage
;session.save_path="tcp://localhost:11211?persistent=1&amp;weight=1&amp;timeout=1&amp;retry_interval=15"
</code></pre>

<p>最後當然一定要</p>

<pre><code>$ service httpd restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-branch]]></title>
    <link href="http://airct.github.com/blog/2012/09/07/git-branch/"/>
    <updated>2012-09-07T22:27:00+08:00</updated>
    <id>http://airct.github.com/blog/2012/09/07/git-branch</id>
    <content type="html"><![CDATA[<h1>git 的指令範例</h1>

<h1>git clone</h1>

<pre><code># git clone git@localhost:/tmp/git/project.git ./project
Cloning into 'project'...
root@localhost's password: 
remote: Counting objects: 6526, done.
remote: Compressing objects: 100% (4573/4573), done.
remote: Total 6526 (delta 2437), reused 5182 (delta 1549)
Receiving objects: 100% (6526/6526), 130.08 MiB | 10.37 MiB/s, done.
Resolving deltas: 100% (2437/2437), done.
</code></pre>

<p><em>localhost 是 git server 的 IP 位置</em><br/>
<em>/tmp/git/project.git 是 git repository 的 路徑位置</em></p>

<h1>git add</h1>

<pre><code># git add -A        // 將所有檔案都加入追蹤，包含刪除的檔案，新建的 ( untrack files )
# git add .         // 將新的和修改的檔案都加入追蹤，但不包含刪除的檔案
# git add -u        // 將有 track 的檔案都更新
</code></pre>

<h1>git branch</h1>

<p>列出目前有那些 branch 以及目前在那個 branch， 參數 -a 表示同時列出遠端和本地的分支<br/>
<em>* 表示目前所在的分支</em></p>

<pre><code># git branch    
* master
  tmp1

# git branch -a
* master
  tmp1
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master

# git branch &lt; *new\_branch\_name* &gt;                                // 建立本地 local branch
# git branch -m &lt; *old\_branch\_name* &gt; &lt; *new\_branch\_name* &gt;     // 改名字 (如果有同名會失敗，改用 -M 可以強制覆蓋)                      
# git branch -D &lt; *branch\_name* &gt;                                  // 刪除 local branch
</code></pre>

<p>git branch -D -r origin/&lt; <em>branch_name</em> >      // 刪除 remote branch，其中 -r 指遠端 -D 強制執行<br/>
git push origin &#8211;delete &lt; <em>remote_branch</em> >   // 比較新版本的 git 才可以使用</p>

<pre><code>[root@localhost repo]# git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/sample
  remotes/origin/master

[root@localhost repo]# git branch -r -D origin/sample
Deleted remote branch origin/sample (was c0cbfd0).

[root@localhost repo]# git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[紀錄安裝 octopress 過程]]></title>
    <link href="http://airct.github.com/blog/2012/09/04/install-octopress/"/>
    <updated>2012-09-04T12:28:00+08:00</updated>
    <id>http://airct.github.com/blog/2012/09/04/install-octopress</id>
    <content type="html"><![CDATA[<p>這篇主要紀錄安裝 octopress 過程</p>

<ul>
<li>Install <a href="http://git-scm.com/">Git</a>.</li>
<li>Install rbenv or <a href="http://rubyinstaller.org/downloads/">RVM</a>.</li>
<li>Install <a href="http://rubyinstaller.org/downloads/">DevKit</a>.</li>
</ul>


<h1>安裝 Octopress</h1>

<pre><code># git clone git://github.com/imathis/octopress.git octopress
# cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</code></pre>

<p>在 Ootopress 的目錄底下安裝 ， 但是 window 中如果是使用 git bash 有可能會出現 PATH 問題。</p>

<pre><code># gem install bundler
Fetching: bundler-1.2.0.gem (100%)
Successfully installed bundler-1.2.0
1 gem installed
Installing ri documentation for bundler-1.2.0...
Installing RDoc documentation for bundler-1.2.0...
</code></pre>

<p>然後</p>

<pre><code># bundle install  // 這裡在 windows 環境下出錯 ， google 之後需要安裝 DevKit
Fetching gem metadata from http://rubygems.org/.......
Using rake (0.9.2.2)
Using RedCloth (4.2.9)
Installing posix-spawn (0.3.6)
Gem::InstallError: The 'posix-spawn' native gem requires installed build tools.

Please update your PATH to include build tools or download the DevKit
from 'http://rubyinstaller.org/downloads' and follow the instructions
at 'http://github.com/oneclick/rubyinstaller/wiki/Development-Kit'
An error occurred while installing posix-spawn (0.3.6), and Bundler cannot continue.
Make sure that `gem install posix-spawn -v '0.3.6'` succeeds before bundling.
</code></pre>

<p>發生錯誤訊息，表示需要先把 gem install posix-spawn -v &#8216;0.3.6&#8217; 安裝成功能才繼續 ， 接著先切換到 DevKit 資料夾下
照著  <a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">參考</a>  開始安裝 DevKit</p>

<pre><code># cd C:\Download\Devkit
# ruby dk.rb init
[INFO] found RubyInstaller v1.9.3 at C:/Ruby193

Initialization complete! Please review and modify the auto-generated
'config.yml' file to ensure it contains the root directories to all
of the installed Rubies you want enhanced by the DevKit.


# ruby dk.rb review
Based upon the settings in the 'config.yml' file generated
from running 'ruby dk.rb init' and any of your customizations,
DevKit functionality will be injected into the following Rubies
when you run 'ruby dk.rb install'.

C:/Ruby193


# ruby dk.rb install
[INFO] Updating convenience notice gem override for 'C:/Ruby193'
[INFO] Installing 'C:/Ruby193/lib/ruby/site_ruby/devkit.rb'
</code></pre>

<p>最後切回 Octopress 目錄後再執行一次</p>

<pre><code># bundle install
Fetching gem metadata from http://rubygems.org/.......
Using rake (0.9.2.2)
Using RedCloth (4.2.9)
Installing posix-spawn (0.3.6) with native extensions
Installing albino (1.3.3)
Installing blankslate (2.1.2.4)
Installing chunky_png (1.2.5)
Installing fast-stemmer (1.0.1) with native extensions
Installing classifier (1.3.3)
Installing fssm (0.2.9)
Installing sass (3.1.20)
Installing compass (0.12.2)
Installing directory_watcher (1.4.1)
Installing ffi (1.0.11) with native extensions
Installing haml (3.1.6)
Installing kramdown (0.13.7)
Installing liquid (2.3.0)
Installing syntax (1.0.0)
Installing maruku (0.6.0)
Installing jekyll (0.11.2)
Installing rubypython (0.5.3)
Installing pygments.rb (0.2.13)
Installing rack (1.4.1)
Installing rack-protection (1.2.0)
Installing rb-fsevent (0.9.1)
Installing rdiscount (1.6.8) with native extensions
Installing rubypants (0.2.0)
Installing tilt (1.3.3)
Installing sinatra (1.3.2)
Installing stringex (1.4.0)
Using bundler (1.2.0)
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem
is installed.
</code></pre>

<p>最後</p>

<pre><code># ruby --version  // 應該會是 Ruby 1.9.3 
ruby 1.9.3p194 (2012-04-20) [i386-mingw32]


# rake install
## Copying classic theme into ./source and ./sass
mkdir -p source
cp -r .themes/classic/source/. source
mkdir -p sass
cp -r .themes/classic/sass/. sass
mkdir -p source/_posts
mkdir -p public
</code></pre>

<p>參考資訊</p>

<p>http://octopress.org/docs/setup/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解決 Octopress 文章內出現中文的時 Rake Generate 的錯誤]]></title>
    <link href="http://airct.github.com/blog/2012/09/04/fix-lang-zh/"/>
    <updated>2012-09-04T12:07:00+08:00</updated>
    <id>http://airct.github.com/blog/2012/09/04/fix-lang-zh</id>
    <content type="html"><![CDATA[<p>Octopress 剛安裝好，如果使用中文 <strong>rake generate</strong> 會出錯。 google 後的 解決方案</p>

<p>修改檔案 C:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-0.11.0\lib\jekyll\convertible.rb 將原本的</p>

<pre><code>self.content = File.read(File.join(base, name))
</code></pre>

<p>修改成</p>

<pre><code>self.content = File.read(File.join(base, name), :encoding =&gt; "utf-8")
</code></pre>

<p>將文章檔案都存成 UTF-8 (檔首無 BOM)</p>
]]></content>
  </entry>
  
</feed>
